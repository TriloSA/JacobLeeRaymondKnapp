//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/ActionFiles/Player2Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player2Actions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player2Actions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player2Actions"",
    ""maps"": [
        {
            ""name"": ""PlayerActions2"",
            ""id"": ""7cb3032a-0a6c-4b10-ab60-c82debd6b1eb"",
            ""actions"": [
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""d25b0ef5-8516-4b86-9a24-e74d14cd8b31"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Launch"",
                    ""type"": ""Button"",
                    ""id"": ""c95e5ad9-beab-4b0e-ab12-298ee1d57392"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UsePowerUp"",
                    ""type"": ""Button"",
                    ""id"": ""1caa919e-7cda-488e-b6d8-7817baa971ec"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotatePowerUp"",
                    ""type"": ""Value"",
                    ""id"": ""9a3237f4-90cc-48a6-abaa-3adc392fbff4"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f572c35c-6218-45b1-be21-ddc5c6b891fb"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c52b9b89-7e0d-48a5-b763-65d930cbf2aa"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Launch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""461518f5-e4cd-4857-af58-1ad443ab59a3"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UsePowerUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""04c22121-604b-4a35-84ae-33c428da686a"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotatePowerUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerActions2
        m_PlayerActions2 = asset.FindActionMap("PlayerActions2", throwIfNotFound: true);
        m_PlayerActions2_Rotate = m_PlayerActions2.FindAction("Rotate", throwIfNotFound: true);
        m_PlayerActions2_Launch = m_PlayerActions2.FindAction("Launch", throwIfNotFound: true);
        m_PlayerActions2_UsePowerUp = m_PlayerActions2.FindAction("UsePowerUp", throwIfNotFound: true);
        m_PlayerActions2_RotatePowerUp = m_PlayerActions2.FindAction("RotatePowerUp", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerActions2
    private readonly InputActionMap m_PlayerActions2;
    private IPlayerActions2Actions m_PlayerActions2ActionsCallbackInterface;
    private readonly InputAction m_PlayerActions2_Rotate;
    private readonly InputAction m_PlayerActions2_Launch;
    private readonly InputAction m_PlayerActions2_UsePowerUp;
    private readonly InputAction m_PlayerActions2_RotatePowerUp;
    public struct PlayerActions2Actions
    {
        private @Player2Actions m_Wrapper;
        public PlayerActions2Actions(@Player2Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotate => m_Wrapper.m_PlayerActions2_Rotate;
        public InputAction @Launch => m_Wrapper.m_PlayerActions2_Launch;
        public InputAction @UsePowerUp => m_Wrapper.m_PlayerActions2_UsePowerUp;
        public InputAction @RotatePowerUp => m_Wrapper.m_PlayerActions2_RotatePowerUp;
        public InputActionMap Get() { return m_Wrapper.m_PlayerActions2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions2Actions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions2Actions instance)
        {
            if (m_Wrapper.m_PlayerActions2ActionsCallbackInterface != null)
            {
                @Rotate.started -= m_Wrapper.m_PlayerActions2ActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_PlayerActions2ActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_PlayerActions2ActionsCallbackInterface.OnRotate;
                @Launch.started -= m_Wrapper.m_PlayerActions2ActionsCallbackInterface.OnLaunch;
                @Launch.performed -= m_Wrapper.m_PlayerActions2ActionsCallbackInterface.OnLaunch;
                @Launch.canceled -= m_Wrapper.m_PlayerActions2ActionsCallbackInterface.OnLaunch;
                @UsePowerUp.started -= m_Wrapper.m_PlayerActions2ActionsCallbackInterface.OnUsePowerUp;
                @UsePowerUp.performed -= m_Wrapper.m_PlayerActions2ActionsCallbackInterface.OnUsePowerUp;
                @UsePowerUp.canceled -= m_Wrapper.m_PlayerActions2ActionsCallbackInterface.OnUsePowerUp;
                @RotatePowerUp.started -= m_Wrapper.m_PlayerActions2ActionsCallbackInterface.OnRotatePowerUp;
                @RotatePowerUp.performed -= m_Wrapper.m_PlayerActions2ActionsCallbackInterface.OnRotatePowerUp;
                @RotatePowerUp.canceled -= m_Wrapper.m_PlayerActions2ActionsCallbackInterface.OnRotatePowerUp;
            }
            m_Wrapper.m_PlayerActions2ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @Launch.started += instance.OnLaunch;
                @Launch.performed += instance.OnLaunch;
                @Launch.canceled += instance.OnLaunch;
                @UsePowerUp.started += instance.OnUsePowerUp;
                @UsePowerUp.performed += instance.OnUsePowerUp;
                @UsePowerUp.canceled += instance.OnUsePowerUp;
                @RotatePowerUp.started += instance.OnRotatePowerUp;
                @RotatePowerUp.performed += instance.OnRotatePowerUp;
                @RotatePowerUp.canceled += instance.OnRotatePowerUp;
            }
        }
    }
    public PlayerActions2Actions @PlayerActions2 => new PlayerActions2Actions(this);
    public interface IPlayerActions2Actions
    {
        void OnRotate(InputAction.CallbackContext context);
        void OnLaunch(InputAction.CallbackContext context);
        void OnUsePowerUp(InputAction.CallbackContext context);
        void OnRotatePowerUp(InputAction.CallbackContext context);
    }
}
